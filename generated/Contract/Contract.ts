// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ArtistWithdraw extends ethereum.Event {
  get params(): ArtistWithdraw__Params {
    return new ArtistWithdraw__Params(this);
  }
}

export class ArtistWithdraw__Params {
  _event: ArtistWithdraw;

  constructor(event: ArtistWithdraw) {
    this._event = event;
  }

  get day(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get author(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ArtistsEarned extends ethereum.Event {
  get params(): ArtistsEarned__Params {
    return new ArtistsEarned__Params(this);
  }
}

export class ArtistsEarned__Params {
  _event: ArtistsEarned;

  constructor(event: ArtistsEarned) {
    this._event = event;
  }

  get day(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OpenEditionPriceUpdated extends ethereum.Event {
  get params(): OpenEditionPriceUpdated__Params {
    return new OpenEditionPriceUpdated__Params(this);
  }
}

export class OpenEditionPriceUpdated__Params {
  _event: OpenEditionPriceUpdated;

  constructor(event: OpenEditionPriceUpdated) {
    this._event = event;
  }

  get price(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnerFeeUpdated extends ethereum.Event {
  get params(): OwnerFeeUpdated__Params {
    return new OwnerFeeUpdated__Params(this);
  }
}

export class OwnerFeeUpdated__Params {
  _event: OwnerFeeUpdated;

  constructor(event: OwnerFeeUpdated) {
    this._event = event;
  }

  get fee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnerWithdrew extends ethereum.Event {
  get params(): OwnerWithdrew__Params {
    return new OwnerWithdrew__Params(this);
  }
}

export class OwnerWithdrew__Params {
  _event: OwnerWithdrew;

  constructor(event: OwnerWithdrew) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Painted extends ethereum.Event {
  get params(): Painted__Params {
    return new Painted__Params(this);
  }
}

export class Painted__Params {
  _event: Painted;

  constructor(event: Painted) {
    this._event = event;
  }

  get day(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get author(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get pixels(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class Started extends ethereum.Event {
  get params(): Started__Params {
    return new Started__Params(this);
  }
}

export class Started__Params {
  _event: Started;

  constructor(event: Started) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Contract__canvasesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getTotalContributions(): BigInt {
    return this.value0;
  }

  getTotalRaised(): BigInt {
    return this.value1;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  brushUsed(day: BigInt, tokenId: BigInt): BigInt {
    let result = super.call(
      "brushUsed",
      "brushUsed(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(day),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_brushUsed(day: BigInt, tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "brushUsed",
      "brushUsed(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(day),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  brushes(): Address {
    let result = super.call("brushes", "brushes():(address)", []);

    return result[0].toAddress();
  }

  try_brushes(): ethereum.CallResult<Address> {
    let result = super.tryCall("brushes", "brushes():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  canvases(param0: BigInt): Contract__canvasesResult {
    let result = super.call("canvases", "canvases(uint256):(uint256,uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return new Contract__canvasesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_canvases(param0: BigInt): ethereum.CallResult<Contract__canvasesResult> {
    let result = super.tryCall(
      "canvases",
      "canvases(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__canvasesResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  contribution(day: BigInt, author: Address): BigInt {
    let result = super.call(
      "contribution",
      "contribution(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(day),
        ethereum.Value.fromAddress(author)
      ]
    );

    return result[0].toBigInt();
  }

  try_contribution(day: BigInt, author: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contribution",
      "contribution(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(day),
        ethereum.Value.fromAddress(author)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  epochDuration(): BigInt {
    let result = super.call("epochDuration", "epochDuration():(uint256)", []);

    return result[0].toBigInt();
  }

  try_epochDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "epochDuration",
      "epochDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  openEditionPrice(): BigInt {
    let result = super.call(
      "openEditionPrice",
      "openEditionPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_openEditionPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "openEditionPrice",
      "openEditionPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerEarned(): BigInt {
    let result = super.call("ownerEarned", "ownerEarned():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ownerEarned(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ownerEarned", "ownerEarned():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ownerFeePartsPerMillion(): BigInt {
    let result = super.call(
      "ownerFeePartsPerMillion",
      "ownerFeePartsPerMillion():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_ownerFeePartsPerMillion(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ownerFeePartsPerMillion",
      "ownerFeePartsPerMillion():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  startedAt(): BigInt {
    let result = super.call("startedAt", "startedAt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startedAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("startedAt", "startedAt():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  today(): BigInt {
    let result = super.call("today", "today():(uint256)", []);

    return result[0].toBigInt();
  }

  try_today(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("today", "today():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uri(param0: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_uri(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _brushes(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _epochDuration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AuthorWithdrawCall extends ethereum.Call {
  get inputs(): AuthorWithdrawCall__Inputs {
    return new AuthorWithdrawCall__Inputs(this);
  }

  get outputs(): AuthorWithdrawCall__Outputs {
    return new AuthorWithdrawCall__Outputs(this);
  }
}

export class AuthorWithdrawCall__Inputs {
  _call: AuthorWithdrawCall;

  constructor(call: AuthorWithdrawCall) {
    this._call = call;
  }

  get indexes(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class AuthorWithdrawCall__Outputs {
  _call: AuthorWithdrawCall;

  constructor(call: AuthorWithdrawCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get day(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get count(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class PaintCall extends ethereum.Call {
  get inputs(): PaintCall__Inputs {
    return new PaintCall__Inputs(this);
  }

  get outputs(): PaintCall__Outputs {
    return new PaintCall__Outputs(this);
  }
}

export class PaintCall__Inputs {
  _call: PaintCall;

  constructor(call: PaintCall) {
    this._call = call;
  }

  get day(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get pixels(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class PaintCall__Outputs {
  _call: PaintCall;

  constructor(call: PaintCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetOpenEditionPriceCall extends ethereum.Call {
  get inputs(): SetOpenEditionPriceCall__Inputs {
    return new SetOpenEditionPriceCall__Inputs(this);
  }

  get outputs(): SetOpenEditionPriceCall__Outputs {
    return new SetOpenEditionPriceCall__Outputs(this);
  }
}

export class SetOpenEditionPriceCall__Inputs {
  _call: SetOpenEditionPriceCall;

  constructor(call: SetOpenEditionPriceCall) {
    this._call = call;
  }

  get newPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetOpenEditionPriceCall__Outputs {
  _call: SetOpenEditionPriceCall;

  constructor(call: SetOpenEditionPriceCall) {
    this._call = call;
  }
}

export class SetOwnerFeeCall extends ethereum.Call {
  get inputs(): SetOwnerFeeCall__Inputs {
    return new SetOwnerFeeCall__Inputs(this);
  }

  get outputs(): SetOwnerFeeCall__Outputs {
    return new SetOwnerFeeCall__Outputs(this);
  }
}

export class SetOwnerFeeCall__Inputs {
  _call: SetOwnerFeeCall;

  constructor(call: SetOwnerFeeCall) {
    this._call = call;
  }

  get newFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetOwnerFeeCall__Outputs {
  _call: SetOwnerFeeCall;

  constructor(call: SetOwnerFeeCall) {
    this._call = call;
  }
}

export class SetURICall extends ethereum.Call {
  get inputs(): SetURICall__Inputs {
    return new SetURICall__Inputs(this);
  }

  get outputs(): SetURICall__Outputs {
    return new SetURICall__Outputs(this);
  }
}

export class SetURICall__Inputs {
  _call: SetURICall;

  constructor(call: SetURICall) {
    this._call = call;
  }

  get newuri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetURICall__Outputs {
  _call: SetURICall;

  constructor(call: SetURICall) {
    this._call = call;
  }
}

export class StartCall extends ethereum.Call {
  get inputs(): StartCall__Inputs {
    return new StartCall__Inputs(this);
  }

  get outputs(): StartCall__Outputs {
    return new StartCall__Outputs(this);
  }
}

export class StartCall__Inputs {
  _call: StartCall;

  constructor(call: StartCall) {
    this._call = call;
  }
}

export class StartCall__Outputs {
  _call: StartCall;

  constructor(call: StartCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
